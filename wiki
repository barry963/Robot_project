2013.10.3

Try to understand how does tactic server send command to the simulator, the whole progress cycle

strategy_thread.cpp

struct RunStatus
{
    RUNSTATUSTYPE Status;		
    STRATEGYTYPE StrategyIndex;	
    double dFreq;				
    char * tactic_name_;
};

QString sTactics[5];

char guitacticsbuf[1000];

Tactic *gui_tactics[MAX_TEAM_ROBOTS] = { NULL, NULL, NULL, NULL, NULL};

QString sTactics[5];
Tactic *tactics[MAX_TEAM_ROBOTS];
Tactic *RunGui_tactics[MAX_TEAM_ROBOTS] = { NULL, NULL, NULL, NULL, NULL};


now/LATENDCY_DELAY

todo: what is Robot::RobotCommand,World, 

continue tommorrow: Status Robot::run in field_world_robot

=================================================================================================

2013.10.7

Class World contains the current situation of the field, including Class Robot 


//==== Obstacle Flags ====//

// Standard Obstacles
const int OBS_BALL=(1 << 0);
const int OBS_WALLS=(1 << 1);

//oponent obstacles
const int OBS_THEIR_DZONE=(1 << 2);

//team obstacles
const int OBS_OUR_DZONE=(1 << 3);

const int OBS_TEAMMATES=((1 << MAX_TEAM_ROBOTS) - 1) <<  4;
const int OBS_OPPONENTS=((1 << MAX_TEAM_ROBOTS) - 1) << (4 + MAX_TEAM_ROBOTS);
const int OBS_EVERYTHING=~((int) 0);
const int OBS_EVERYTHING_BUT_US=OBS_EVERYTHING & (~(OBS_TEAMMATES));
const int OBS_EVERYTHING_BUT_BALL=OBS_EVERYTHING & (~(OBS_BALL));

inline int OBS_TEAMMATE(int id)
{
        if (id<0 || id>=4)return 0;
        else
        {
                return 1 << (4 + id);
        }
};
//#define OBS_TEAMMATE(id) (1 << (4 + id))
#define OBS_OPPONENT(id) (1 << (4 + MAX_TEAM_ROBOTS + id))
#define OBS_EVERYTHING_BUT_ME(id) (OBS_EVERYTHING & (~(OBS_TEAMMATE(id))))

the robot didn't go to the target place.
TODO: try to resolve this problem

=================================================================================================

2013.10.17 solved
Bug:
1. the strategy server cannot show the location of yellow team when it goes to the blue team field.
solved


2. error at net_base.cpp    solved
qint64 len = UdpSocket->writeDatagram((const char*)data,length,dest.addr,dest.port_);
UdpSocket pointer null...

solved
The key is to figure out which pointer is null.

3. null pointer at kdtree.h 
clear(root->child[0]);
clear(root->child[1]);

move down
=================================================================================================
2013.10.22
Try to solve Bug1
1. the location after parse     solved

two cameras and also no need to update, for recording purpose only

solved 
the problem, the key is the compare the updating code for two teams

=================================================================================================
2013.10.23
Bug:
4. two balls appear when moving the ball to the center, it must be graphic programming bug      solved

pay attention to the relationship between FieldSence and FieldView, the latter contains the former.

Solved:
Ball  0 :( 177.778 , 466.667 ) 1 
Ball  1 :( 0 , 244.444 ) 1 
Ball  2 :( 0 , 0 ) 0 
Ball  3 :( 0 , 0 ) 0 
Ball  0 :( 211.111 , 477.778 ) 1 
Ball  1 :( 0 , 244.444 ) 1 
Ball  2 :( 0 , 0 ) 0 
Ball  3 :( 0 , 0 ) 0 

The problem comes from the programming in vision update, every time update, the VInfoRaw should firstly be cleared.

TODO: 
1. how does etWebserverSendThread work
2. how does vision_send_thread_ work, it has never been used

VInfoRaw only stores the raw info from SSL
vision_info stores the info after processing from VInfoRaw
VInfo0 is used to set vision_info to current simulator vision field

    // various threading
    StrategyThread* strategy_thread_;
    VisionSendThread* vision_send_thread_;
    VisionReceiveThread* vision_receive_thread_;
    RadioSendThread* radio_send_thread_;
    RadioReceiveThread* radio_receive_thread0_;
    RadioReceiveThread* radio_receive_thread1_;
    RefboxReceiveThread* refbox_receive_thread_;
    NetWebserverSendThread* net_webserver_send_thread_;

JSP server


=======================================
2013/11/28
try to solve this bug of 2013/10/17

3. null pointer at kdtree.h
clear(root->child[0]);
clear(root->child[1]);
move down

Bug
5. Somethimes the locations of balls and robot are 0, seems the problem of DECT frame, so I should check DECT frame firstly
move to down

=======================================
2013/12/7
field_analysor_configreader.h

try to figure out the execute of specific tactic

=======================================
2013/12/9

typedef DataMap *PDataMap; //field_analysor_configreader.h

pay attention to pure virtual function, that means this function is just a interface.

TODO: kick the ball, done

=======================================
2013/12/21

add all the special strategy

    SMState gotoBall    (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState faceBall    (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState approachBall(World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState pullBall    (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState faceTarget  (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState driveToGoal (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState kick        (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState spinAtBall  (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState position    (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState recieveBall (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);
    SMState wait        (World &world,Sensors &s,RobotCommand &cmd,NavTarget &nav);


field_world_robot.h

=======================================
2013/12/25

field_world_robot.cpp
Status Robot::run(World &world,RobotCommand &cmd,Trajectory &tcmd)

set the kick and dribble power

TODO: estimate kick and dribble power



=======================================
2013/12/28

TODO: Strategy header and source file meaning

question:
1. pull ball ability exist or not?

2. ParamSet *settings=NULL;
    field_global_function.cpp

field_world_robot.cpp
kick()
time_in_state>0.25+1.75*omni???


arbitrary set teammateid=1 in ball_tactics.cpp line#450

3. how to control specific robot? The process in detail, done
panel -> gui_tactics ->each robot, run(world,i)

Problem:
Here each robot runs the same tactics, so tactics needs to enable each participating robot to do their own corresponding work.


=======================================
2013/12/29

try to implement pass and receive in special_tactics by TPass and TPassReceive
now two robots can pass and receive, but the result is not stable

question
4. giShootPowerPass value and also function getTeammateId() in base_tactic (teammate_map and corresponding PlayExecutor class)

TODO: accurately control that process

=======================================
2013/12/29

confused: why this rules, it is not neccesary, so comment this
    //if stay in this state too long, then just push the ball
    if (time_in_state>0.25+1.75*omni)
    {
        qDebug()<<"Kick state too long, so switch to go to ball"<<time_in_state;
        return(SMGotoBall);
    }


strategy_thread.cpp
    for (int i=0; i<world.n_teammates; i++)
    {
        if (gui_tactics[i])
        {
            // execute tactics!!!
            gui_tactics[i]->run(world, i);

            if(gui_tactics[i]->isDone(world,i)==3)
            {
                InternalStatus.Status=RUN_STOP;
                OldInternalStatus.Status=RUN_STOP;
            }
is commented now

TPass in ball_tactics.cpp
TPass::command(...)

change from
command.target = targetp;
to
command.target = mytarget;
=======================================
2014/1/1

The reason that TPassandReceive cannot change cmd is that it constructs object every running time... that's why you cannot store the status

So the main problem is about the relationship between tactic and skills

This time for demo, just add new external variable.
bool positionflag=false;//lu_test add temporarily, just for demo

=======================================
2014/1/13

The problem now is that to run the robot.

port_operation.cpp
char const *PORT  = "/dev/ttyUSB1"; //pay attention here

field_world.cpp
#802 add the physical communication part to the code, #if 0 change to #if 1

then another problem now is that 
strategy_thread.cpp
#606 world.vision_info_ = vision_info;

problem about memory, try to improve!

it seems that problem comes from function 
void FillComChar(unsigned char c)
{
    if (c==CHARSYN)
    {
        ComBuf[iComBufSize++]=CHARESC;
        ComBuf[iComBufSize++]=ESC_SYN;
    }
    else if (c==CHARESC)
    {
        ComBuf[iComBufSize++]=CHARESC;
        ComBuf[iComBufSize++]=ESC_ESC;
    }
    else
    {
        ComBuf[iComBufSize++]=c;
    }
}

in this function, ComBuf[]is defined as ComBuf[100], but when monitering this array, the size is always increasing, over 100. So the problem is that every time after sending the package, iComBufSize shoud be set as 0.
So, solution: field_world.cpp #716 iComBufSize = 0;

=======================================
2014/1/14

Today goal
1. joystick test Done
2. normal skill test like shoot

transparent_operation.cpp
comment this part #226-#231

    for(j = 0;j<length+1;j++)
    {
        printf("inside:%02x\n",*(final_packet+j));
    }

comment
#235 //printf("\n%d\nport:%d\n",send_byte_count_,port_);// lu_test


#1 problem now is that when starting the control, the robot will run by itself and after sending command, it will then follow the command.
Solution: in the initial time, some noise will be sent, so try to read the joystick event for several time to cut the noise.

#2 problem similar problem as #1 when starting the strategy server
solution may be the same

#3 problem add joystick as a part of UI
joystick is a closed loop, so how to jump out from this loop, I can leave it later as it is not a serious problem.
Try to add STRATEGY_JOYSTICK, now comment its following execute function.

=======================================
2014/1/15

Today goal
1. Normal skill test

field_world.cpp
SerialServer serial_server_;


pCmd store current command to simulator by net


strategy_thread.cpp
RadioServer radio_send_server;//It seems to be the server to send UDP, not the radio.

decrease the max speed of field_go_robot_goto
motion.cfg
OMNI_MAX_ACCEL =       3500     3500     3500    3500 # mm/s^2
OMNI_MAX_SPEED =       1500     900      900     900  # mm/s
OMNI_MAX_ANG_ACCEL =       18       12       12      12   # radians/s^2
OMNI_MAX_ANG_VEL =     6        4        4       4    # radians/s

Bug
5. Somethimes the locations of balls and robot are 0, seems the problem of DECT frame, so I should check DECT frame firstly
Solution: net_vision_receive_thread.cpp can detect the ball, but the target is 0.
The process of data following       Kalman problem


6. two balls appear         not a serious problem


=======================================
2014/1/16

Bug
3. null pointer at kdtree.h
clear(root->child[0]);
clear(root->child[1]);
move down

7. control_hub/computer_control/knowledge_base/algorithms/path_planner/path_planner.cpp:336: state PathPlanner::plan(obstacles*, int, state, state, int&): Assertion `nearest!=__null' failed.


8. debug line is wrong when 'Side Selection' is set as 'Up Side'        solved
gui_debug_line problem

Solution: gui_debug_line() function shoud also consider the side of world

9. MaybeOccluded! Study it later, kalman problem



The main problem of normal skill test is that the speed is abnormal.
SO start from SPosition
motion planning problem!!!
field_world_robot_goto_point.cpp
nav_to_point(XXX) function

=======================================
2014/1/20
Bug
10. variable inside FormByteCommand() and outside FormByteCommand() is different
Solutioin: do not use this function

Change MAX_NODES from 5000 to 6000  //path_planner

=======================================
2014/1/21

path_planner.cpp
//assert(nearest!=NULL); Lu_test command
d=distance(*nearest,goal);// Lu_test add

Bug
3. null pointer at kdtree.h
clear(root->child[0]);
clear(root->child[1]);
Reason: root is not null, but it does not point to any memory
Solution: I guess the problem comes from the unstable data. Confused: in the arrangement, is both leaves arranged? Yes
Probrabaly it results from the disturb between net_vision_receive_thread and ObjectTracker.
Now it is sure that the problem is not the unstable data or thread disturbance.

Try to figure out the vision data flow, as field and calculate all need the data after processing nor the raw data

=======================================
2014/1/21

Bug
11. when there is nothing, the previous location still remains.
Solution: consider the situation when there is no ball or robot in net_vision_receive_thread.cpp
But it will result another problem when there is blank vision data that will cause blink

display_set_mutex, lock the process when set world.vision_info_ as vision_info

12. plan-path blinks sometimes


13. Adjust angle when executing TShoot strategy
14. Cannot accurately reaches the goal

Question:
1.        do
        {
            target.pos = initial.pos*(1-s) + goal.pos*s;// why here is pulus not minus
            ok = obs->check(initial,target);
            s -= 0.1;
        }
        while (s>0 && !ok);

        path_planner.cpp


adjust field_constants.h

/* Frame time and latencies */
#define FRAME_RATE    64.0
#define FRAME_PERIOD  (1.0 / FRAME_RATE)

// this needs to be remeasured
#define LATENCY_DELAY 0.100



add POSITION_ACCURACY 20;//increase later

Question
2. field_world_robot.cpp
    case CmdPosition:
        //20=最高速度/60;
        if (MyVector::distance(cmd.target,s.r_pos) < POSITION_ACCURACY)
        {
            status = Completed;
        }
        else
        {
            status = InProgress;
        }
        break;

target angle, velocity etc. should also be taken into consideration

3. lock the world or use the same world when update postion, velocity etc, like in the sensor(field_work_robot.cpp)

Goal:
1. Add target position figure. 

        brush = new QBrush(Qt::NoBrush);
        pen = new QPen (Qt::DotLine);

        construction function of field_robot.cpp

2. Firstly, enable the robot to reach specific position

=======================================
2014/1/22

1. Add target position figure       Still need debug

paint_buffer.cpp

field_world_robot_goto_point.cpp
#851 gui_debug_robot(XXX);

const float POSITION_ACCURACY = 500;

TODO:
Slow down when approaching the target goal.


=======================================
2014/1/23

Show target position and debug function executes in 
        field_view.cpp, drawForeground(XXX), GuiCmd.Execmds(painter);


Attention:
When open real cameror and simulator cameror at the same time, the behaviour of the robot is similar with the real robot!!!!

//lu_test change all to true

Needs to improve the net_vision_receive_thread.cpp later.


            for(int i=0;i<100;i++)
            {
                client.Receive ( packet );
            }
            vision_initial_flag = false;

            //why here it should be 100 times



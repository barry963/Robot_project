colors = [['red', 'green', 'green', 'red' , 'red'],
          ['red', 'red', 'green', 'red', 'red'],
          ['red', 'red', 'green', 'green', 'red'],
          ['red', 'red', 'red', 'red', 'red']]

measurements = ['green', 'green', 'green' ,'green', 'green']


motions = [[0,0],[0,1],[1,0],[1,0],[0,1]]

sensor_right = 0.7

p_move = 0.8

def show(p):
    for i in range(len(p)):
        print p[i]

#DO NOT USE IMPORT
#ENTER CODE BELOW HERE
#ANY CODE ABOVE WILL CAUSE
#HOMEWORK TO BE GRADED
#INCORRECT

def normalized(a):
    N = sum([sum(x) for x in a])
    return [ [ float(x)/N for x in y ] for y in a ]

def sense(p, Z):
    def sense1d(a, Z, j):
        return [a[i]*(sensor_right if colors[j][i] == Z else (1-sensor_right)) for i in range(len(a))]
    return normalized([sense1d(p[i],'green',i) for i in xrange(len(p))])

def moveFil(a, M):
    # Probability not moving (staying at a[i]) = (1-p_move)
    return [p_move*a[(i-M)%len(a)] + (1-p_move)*a[i] for i in xrange(len(a))]

def moveCol(p, M):
    q = []
    for i in xrange(len(p)):
        q.append(p[(i-M)%len(p)])
    for i in xrange(len(q)):
        for j in xrange(len(q)):
            q[i][j] = (1-p_move)*q[(i+M)%len(q)][j] + (p_move)*q[i][j]
    return q

def move(p, M):
    return moveCol([moveFil(a,M[1]) for a in p], M[0])

p = normalized([ [ 1 for col in files ] for files in colors ])
for i in xrange(len(motions)):
    p = sense(p, measurements[i])
    p = move(p, motions[i])

#Your probability array must be printed 
#with the following code.

show(p)

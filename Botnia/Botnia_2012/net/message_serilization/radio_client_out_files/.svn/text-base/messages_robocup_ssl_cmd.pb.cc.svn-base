// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_robocup_ssl_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SSL_RobotCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_RobotCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSL_RadioFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_RadioFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5frobocup_5fssl_5fcmd_2eproto() {
  protobuf_AddDesc_messages_5frobocup_5fssl_5fcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_robocup_ssl_cmd.proto");
  GOOGLE_CHECK(file != NULL);
  SSL_RobotCmd_descriptor_ = file->message_type(0);
  static const int SSL_RobotCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, drib_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, is_chip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, send_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, forcekick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, drib_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, va_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, kick_time_),
  };
  SSL_RobotCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSL_RobotCmd_descriptor_,
      SSL_RobotCmd::default_instance_,
      SSL_RobotCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RobotCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSL_RobotCmd));
  SSL_RadioFrame_descriptor_ = file->message_type(1);
  static const int SSL_RadioFrame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RadioFrame, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RadioFrame, cmds_),
  };
  SSL_RadioFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSL_RadioFrame_descriptor_,
      SSL_RadioFrame::default_instance_,
      SSL_RadioFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RadioFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_RadioFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSL_RadioFrame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5frobocup_5fssl_5fcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSL_RobotCmd_descriptor_, &SSL_RobotCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSL_RadioFrame_descriptor_, &SSL_RadioFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fcmd_2eproto() {
  delete SSL_RobotCmd::default_instance_;
  delete SSL_RobotCmd_reflection_;
  delete SSL_RadioFrame::default_instance_;
  delete SSL_RadioFrame_reflection_;
}

void protobuf_AddDesc_messages_5frobocup_5fssl_5fcmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036messages_robocup_ssl_cmd.proto\"\274\001\n\014SSL"
    "_RobotCmd\022\014\n\004team\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\020\n\010d"
    "rib_dir\030\003 \002(\010\022\017\n\007is_chip\030\004 \002(\010\022\021\n\tsend_b"
    "ack\030\005 \002(\010\022\021\n\tforcekick\030\006 \002(\010\022\022\n\ndrib_spe"
    "ed\030\007 \002(\r\022\n\n\002vx\030\010 \002(\002\022\n\n\002vy\030\t \002(\002\022\n\n\002va\030\n"
    " \002(\002\022\021\n\tkick_time\030\013 \002(\r\"A\n\016SSL_RadioFram"
    "e\022\022\n\ntime_stamp\030\001 \002(\001\022\033\n\004cmds\030\002 \003(\0132\r.SS"
    "L_RobotCmd", 290);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_cmd.proto", &protobuf_RegisterTypes);
  SSL_RobotCmd::default_instance_ = new SSL_RobotCmd();
  SSL_RadioFrame::default_instance_ = new SSL_RadioFrame();
  SSL_RobotCmd::default_instance_->InitAsDefaultInstance();
  SSL_RadioFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5frobocup_5fssl_5fcmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5frobocup_5fssl_5fcmd_2eproto {
  StaticDescriptorInitializer_messages_5frobocup_5fssl_5fcmd_2eproto() {
    protobuf_AddDesc_messages_5frobocup_5fssl_5fcmd_2eproto();
  }
} static_descriptor_initializer_messages_5frobocup_5fssl_5fcmd_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SSL_RobotCmd::kTeamFieldNumber;
const int SSL_RobotCmd::kIdFieldNumber;
const int SSL_RobotCmd::kDribDirFieldNumber;
const int SSL_RobotCmd::kIsChipFieldNumber;
const int SSL_RobotCmd::kSendBackFieldNumber;
const int SSL_RobotCmd::kForcekickFieldNumber;
const int SSL_RobotCmd::kDribSpeedFieldNumber;
const int SSL_RobotCmd::kVxFieldNumber;
const int SSL_RobotCmd::kVyFieldNumber;
const int SSL_RobotCmd::kVaFieldNumber;
const int SSL_RobotCmd::kKickTimeFieldNumber;
#endif  // !_MSC_VER

SSL_RobotCmd::SSL_RobotCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSL_RobotCmd::InitAsDefaultInstance() {
}

SSL_RobotCmd::SSL_RobotCmd(const SSL_RobotCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSL_RobotCmd::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  id_ = 0u;
  drib_dir_ = false;
  is_chip_ = false;
  send_back_ = false;
  forcekick_ = false;
  drib_speed_ = 0u;
  vx_ = 0;
  vy_ = 0;
  va_ = 0;
  kick_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_RobotCmd::~SSL_RobotCmd() {
  SharedDtor();
}

void SSL_RobotCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_RobotCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_RobotCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_RobotCmd_descriptor_;
}

const SSL_RobotCmd& SSL_RobotCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fcmd_2eproto();  return *default_instance_;
}

SSL_RobotCmd* SSL_RobotCmd::default_instance_ = NULL;

SSL_RobotCmd* SSL_RobotCmd::New() const {
  return new SSL_RobotCmd;
}

void SSL_RobotCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0u;
    id_ = 0u;
    drib_dir_ = false;
    is_chip_ = false;
    send_back_ = false;
    forcekick_ = false;
    drib_speed_ = 0u;
    vx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vy_ = 0;
    va_ = 0;
    kick_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSL_RobotCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_drib_dir;
        break;
      }
      
      // required bool drib_dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drib_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drib_dir_)));
          set_has_drib_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_chip;
        break;
      }
      
      // required bool is_chip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_chip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_chip_)));
          set_has_is_chip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_send_back;
        break;
      }
      
      // required bool send_back = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_back_)));
          set_has_send_back();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forcekick;
        break;
      }
      
      // required bool forcekick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forcekick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forcekick_)));
          set_has_forcekick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_drib_speed;
        break;
      }
      
      // required uint32 drib_speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drib_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drib_speed_)));
          set_has_drib_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_vx;
        break;
      }
      
      // required float vx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_vy;
        break;
      }
      
      // required float vy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_va;
        break;
      }
      
      // required float va = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_va:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &va_)));
          set_has_va();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_kick_time;
        break;
      }
      
      // required uint32 kick_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_time_)));
          set_has_kick_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSL_RobotCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // required bool drib_dir = 3;
  if (has_drib_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->drib_dir(), output);
  }
  
  // required bool is_chip = 4;
  if (has_is_chip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_chip(), output);
  }
  
  // required bool send_back = 5;
  if (has_send_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_back(), output);
  }
  
  // required bool forcekick = 6;
  if (has_forcekick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->forcekick(), output);
  }
  
  // required uint32 drib_speed = 7;
  if (has_drib_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->drib_speed(), output);
  }
  
  // required float vx = 8;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->vx(), output);
  }
  
  // required float vy = 9;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->vy(), output);
  }
  
  // required float va = 10;
  if (has_va()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->va(), output);
  }
  
  // required uint32 kick_time = 11;
  if (has_kick_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kick_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSL_RobotCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // required bool drib_dir = 3;
  if (has_drib_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->drib_dir(), target);
  }
  
  // required bool is_chip = 4;
  if (has_is_chip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_chip(), target);
  }
  
  // required bool send_back = 5;
  if (has_send_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->send_back(), target);
  }
  
  // required bool forcekick = 6;
  if (has_forcekick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->forcekick(), target);
  }
  
  // required uint32 drib_speed = 7;
  if (has_drib_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->drib_speed(), target);
  }
  
  // required float vx = 8;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->vx(), target);
  }
  
  // required float vy = 9;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->vy(), target);
  }
  
  // required float va = 10;
  if (has_va()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->va(), target);
  }
  
  // required uint32 kick_time = 11;
  if (has_kick_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kick_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSL_RobotCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }
    
    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required bool drib_dir = 3;
    if (has_drib_dir()) {
      total_size += 1 + 1;
    }
    
    // required bool is_chip = 4;
    if (has_is_chip()) {
      total_size += 1 + 1;
    }
    
    // required bool send_back = 5;
    if (has_send_back()) {
      total_size += 1 + 1;
    }
    
    // required bool forcekick = 6;
    if (has_forcekick()) {
      total_size += 1 + 1;
    }
    
    // required uint32 drib_speed = 7;
    if (has_drib_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drib_speed());
    }
    
    // required float vx = 8;
    if (has_vx()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float vy = 9;
    if (has_vy()) {
      total_size += 1 + 4;
    }
    
    // required float va = 10;
    if (has_va()) {
      total_size += 1 + 4;
    }
    
    // required uint32 kick_time = 11;
    if (has_kick_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_RobotCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSL_RobotCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSL_RobotCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSL_RobotCmd::MergeFrom(const SSL_RobotCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_drib_dir()) {
      set_drib_dir(from.drib_dir());
    }
    if (from.has_is_chip()) {
      set_is_chip(from.is_chip());
    }
    if (from.has_send_back()) {
      set_send_back(from.send_back());
    }
    if (from.has_forcekick()) {
      set_forcekick(from.forcekick());
    }
    if (from.has_drib_speed()) {
      set_drib_speed(from.drib_speed());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_va()) {
      set_va(from.va());
    }
    if (from.has_kick_time()) {
      set_kick_time(from.kick_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSL_RobotCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RobotCmd::CopyFrom(const SSL_RobotCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RobotCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void SSL_RobotCmd::Swap(SSL_RobotCmd* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(id_, other->id_);
    std::swap(drib_dir_, other->drib_dir_);
    std::swap(is_chip_, other->is_chip_);
    std::swap(send_back_, other->send_back_);
    std::swap(forcekick_, other->forcekick_);
    std::swap(drib_speed_, other->drib_speed_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(va_, other->va_);
    std::swap(kick_time_, other->kick_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSL_RobotCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_RobotCmd_descriptor_;
  metadata.reflection = SSL_RobotCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSL_RadioFrame::kTimeStampFieldNumber;
const int SSL_RadioFrame::kCmdsFieldNumber;
#endif  // !_MSC_VER

SSL_RadioFrame::SSL_RadioFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSL_RadioFrame::InitAsDefaultInstance() {
}

SSL_RadioFrame::SSL_RadioFrame(const SSL_RadioFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSL_RadioFrame::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_RadioFrame::~SSL_RadioFrame() {
  SharedDtor();
}

void SSL_RadioFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_RadioFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_RadioFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_RadioFrame_descriptor_;
}

const SSL_RadioFrame& SSL_RadioFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fcmd_2eproto();  return *default_instance_;
}

SSL_RadioFrame* SSL_RadioFrame::default_instance_ = NULL;

SSL_RadioFrame* SSL_RadioFrame::New() const {
  return new SSL_RadioFrame;
}

void SSL_RadioFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = 0;
  }
  cmds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSL_RadioFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double time_stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cmds;
        break;
      }
      
      // repeated .SSL_RobotCmd cmds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cmds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cmds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSL_RadioFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_stamp(), output);
  }
  
  // repeated .SSL_RobotCmd cmds = 2;
  for (int i = 0; i < this->cmds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cmds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSL_RadioFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_stamp(), target);
  }
  
  // repeated .SSL_RobotCmd cmds = 2;
  for (int i = 0; i < this->cmds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cmds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSL_RadioFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .SSL_RobotCmd cmds = 2;
  total_size += 1 * this->cmds_size();
  for (int i = 0; i < this->cmds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cmds(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_RadioFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSL_RadioFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSL_RadioFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSL_RadioFrame::MergeFrom(const SSL_RadioFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmds_.MergeFrom(from.cmds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSL_RadioFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RadioFrame::CopyFrom(const SSL_RadioFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RadioFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < cmds_size(); i++) {
    if (!this->cmds(i).IsInitialized()) return false;
  }
  return true;
}

void SSL_RadioFrame::Swap(SSL_RadioFrame* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    cmds_.Swap(&other->cmds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSL_RadioFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_RadioFrame_descriptor_;
  metadata.reflection = SSL_RadioFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
